Input:
         1
       /   \
      2     3
    /  \    /  \
   4   5  6   8
  /
 7
target = 7
Output: [4 2 1]
Explanation: The given target is 7, if we go above the level of node 7, then we find 4, 2 and 1. Hence the ancestors of node 7 are 4 2 and 1
#code:
// User function template for C++

/*
Structure of a node is as following
struct Node
{
     int data;
     struct Node* left;
     struct Node* right;
};
*/

class Solution {
  public:
    // Function should return all the ancestor of the target node
    bool findAncestors(struct Node *root, int target , vector<int>& ans){
        //base case
        if(root == NULL) return NULL;
        if(root -> data == target) return true;
        // recursive call
        // we traverse left and right same time 
        if(findAncestors(root->left,target,ans) || findAncestors(root->right,target,ans) ){
            ans.push_back(root -> data);
            return true;
        }
        return false;
    }
    vector<int> Ancestors(struct Node *root, int target) {
       vector<int>ans;
       findAncestors(root , target , ans);
       return ans;
    }
};
