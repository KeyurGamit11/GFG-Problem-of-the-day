Input:
   2
 /    \
1      3
        \
         5
Output: true 
Explanation: 
The left subtree of every node contains smaller keys and right subtree of every node contains greater. Hence, the tree is a BST.
#step:we traverse tree using inorder so left-root-right so in vector its sorted so after we simoly check i and i+1
#code:
class Solution {
  public:
    // Function to check whether a Binary Tree is BST or not.
    void inorder(Node* root , vector<int>&ans){
        if(root == NULL){
            return;
        }
        inorder(root -> left , ans);
        ans.push_back(root -> data);
        inorder(root -> right , ans);
    }
    bool isBST(Node* root) {
        vector<int>ans;
        inorder(root , ans);
        for(int i=0; i<ans.size()-1; i++){
            if(ans[i] >= ans[i+1]){
                return false;
            }
        }
        return true;
    }
};
