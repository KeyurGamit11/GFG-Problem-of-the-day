Input: arr[] = {12, 1, 2, 3, 0, 11, 4}
Output: 6 1 1 1 0 1 0
Explanation: There are 6 smaller elements right
after 12. There is 1 smaller element right after
1. And so on.
#we are using order_set for that
#code:
// User function Template for C++
//  User function template for C++
// Common file
//main things to include
#include <ext/pb_ds/assoc_container.hpp>
// Including tree_order_statistics_node_update
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define ordered_set tree < int ,  null_type ,  less_equal<int> ,  rb_tree_tag ,  tree_order_statistics_node_update >


class Solution {
  public:
    vector<int> constructLowerArray(vector<int> &arr) {
        ordered_set o_set;
        vector<int>ans(arr.size(),0);
        for(int i=arr.size()-1; i>=0; i--){
           ans[i] = o_set.order_of_key(arr[i]);
           o_set.insert(arr[i]);
        }
        return ans;
    }
};
