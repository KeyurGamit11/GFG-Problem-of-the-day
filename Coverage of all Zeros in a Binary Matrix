Input:
matrix = [[0, 1, 0],
          [0, 1, 1],
          [0, 0, 0]]
Output: 6
Explanation: There are a total of 6 coverage are there
#code:
class Solution {
  public:
    int findCoverage(vector<vector<int>>& matrix) {
        // for top i-i >= 0 and bottom i+1 < n
        // for left j-1 >= 0 and right j+1 < m
        int ans = 0;
        int n = matrix.size();
        int m = matrix[0].size();
        
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(matrix[i][j] == 1){
                    continue;
                }
                if(i-1 >= 0 and matrix[i-1][j] == 1){
                    ans++; // go into top and check if 1 is
                }
                if(i+1 < n and matrix[i+1][j] == 1){
                    ans++; // go into bottom and check if 1 is
                }
                if(j-1 >= 0 and matrix[i][j-1] == 1){
                    ans++; // go to left and check if 1 is
                }
                if(j+1 < m and matrix[i][j+1] == 1){
                    ans++; // go to right and if 1 is
                }
            }
        }
        return ans;
    }
};
