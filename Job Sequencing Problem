Input: Jobs = [[1,4,20],[2,1,1],[3,1,40],[4,1,30]]
Output: 2 60
Explanation: Job1 and Job3 can be done with maximum profit of 60 (20+40).
#code:
/*
struct Job 
{ 
    int id;	 // Job Id 
    int dead; // Deadline of job 
    int profit; // Profit if job is over before or on deadline 
};
*/

class Solution 
{
    public:
    static bool func(Job &a , Job& b){
        return a.dead < b.dead;
    }
    vector<int> JobScheduling(Job arr[], int n) 
    { 
        int c=0; 
        int totalprofit=0;
        sort(arr,arr+n ,func);
         priority_queue<int,vector<int>,greater<int>> pq;
         for(int i=0; i<n; i++){
             if(arr[i].dead > pq.size()){
                 pq.push(arr[i].profit);
             }
             else if(arr[i].dead == pq.size()){
                 if(arr[i].profit > pq.top()){
                     pq.pop();
                     pq.push(arr[i].profit);
                 }
             }
         }
         
         c = pq.size();
         while(pq.size()){
             totalprofit += pq.top();
             pq.pop();
         }
         return {c , totalprofit};
    } 
};
