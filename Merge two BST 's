Input:
BST1:
       5
     /   \
    3     6
   / \
  2   4  
BST2:
        2
      /   \
     1     3
            \
             7
            /
           6
Output: 1 2 2 3 3 4 5 6 6 7
Explanation: After merging and sorting the two BST we get 1 2 2 3 3 4 5 6 6 7.
#we traverse two bst by inorder and put into ans vector ans and sort the ans 
#code:
/*
struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};
*/
class Solution {
  public:
    // Function to return a list of integers denoting the node
    // values of both the BST in a sorted order.
    void inorder(Node* root , vector<int>&ans){
        if(root == NULL){
            return;
        }
        inorder(root -> left , ans);
        ans.push_back(root -> data);
        inorder(root -> right , ans);
    }
    vector<int> merge(Node *root1, Node *root2) {
       vector<int>ans;
       inorder(root1,ans);
       inorder(root2,ans);
       
       sort(ans.begin() , ans.end());
       return ans;
    }
};
