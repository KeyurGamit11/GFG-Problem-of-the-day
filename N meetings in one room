Input: n = 6, start[] = [1, 3, 0, 5, 8, 5], end[] =  [2, 4, 6, 7, 9, 9]
Output: 4
Explanation: Maximum four meetings can be held with given start and end timings. The meetings are - (1, 2), (3, 4), (5,7) and (8,9)
#code:
class Solution {
  public:
    // Function to find the maximum number of meetings that can
    // be performed in a meeting room.
    int maxMeetings(int n, int start[], int end[]) {
        vector<pair<int,int>>meetings;
        for(int i=0; i<n; i++){
            meetings.push_back({end[i] , start[i]}); // store in pair
        }
        sort(meetings.begin() , meetings.end()); // sort on besis of end
        int cnt=0;
        int endtime=-1;
        
        for(int i=0; i<n; i++){
            if(meetings[i].second > endtime){
                cnt++;
                endtime=meetings[i].first;
            }
        }
        return cnt;
    }
};
