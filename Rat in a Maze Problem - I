Input: mat[][] = [[1, 0, 0, 0],
                [1, 1, 0, 1], 
                [1, 1, 0, 0],
                [0, 1, 1, 1]]
Output: DDRDRR DRDDRR
Explanation: The rat can reach the destination at (3, 3) from (0, 0) by two paths - DRDDRR and DDRDRR, when printed in sorted order we get DDRDRR DRDDRR.
#code:
// User function template for C++
class Solution {
  private:
   vector<string>ans;
   void solve(int i, int j,int n, int m,string s, vector<vector<int>>&vis, vector<vector<int>> &mat){
       //base case
       if(i<0 || j<0 ||i> n-1|| j > m-1 || vis[i][j] || mat[i][j] == 0){
           return;
       }
       if(i==n-1 && j==m-1){ // means rat reach to last 
           ans.push_back(s);
           return;
       }
       //recursive call
       vis[i][j] =1; // for visted 
       solve(i+1,j,n,m,s+'D',vis,mat); // for down
       solve(i,j+1,n,m,s+'R',vis,mat); // for right
       solve(i-1,j,n,m,s+'U',vis,mat); // for up
       solve(i,j-1,n,m,s+'L',vis,mat); // for left
       vis[i][j]=0; // mark  0 to unvisited all
       return;
       
   }
   
  public:
    vector<string> findPath(vector<vector<int>> &mat) {
        // Your code goes here
        int n=mat.size();
        int m = mat[0].size();
        if(mat[0][0] == 0){
            return {"-1"};
        }
        vector<vector<int>>vis(n , vector<int>(m,0));
        solve(0,0,n,m,"",vis,mat);
        return ans;
    }
};
