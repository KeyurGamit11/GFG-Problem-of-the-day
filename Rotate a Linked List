Input: linkedlist: 2->4->7->8->9 , k = 3
Output: 8->9->2->4->7
Explanation:
Rotate 1: 4 -> 7 -> 8 -> 9 -> 2
Rotate 2: 7 -> 8 -> 9 -> 2 -> 4
Rotate 3: 8 -> 9 -> 2 -> 4 -> 7
just do dry run for better understanding
#code:
/*

struct Node {
    int data;
    struct Node *next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};

*/

class Solution {
  public:
    // Function to rotate a linked list.
    Node* rotate(Node* head, int k) {
       if(head == NULL) return NULL;
       Node* temp = head;
       while(temp -> next != NULL){
           temp = temp -> next;
       }
       temp -> next = head; //last node connect into first node
       while(--k)
       head = head->next; // head increment
       Node* newHead = head -> next; // make new node for head next
       head -> next = NULL; // head node connect to null so it not become circular
       return newHead;
    }
};
